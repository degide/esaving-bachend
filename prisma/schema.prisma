// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client"
  output   = "../src/modules/prisma/client"

  runtime                = "nodejs"
  moduleFormat           = "cjs"
  generatedFileExtension = "ts"
  importFileExtension    = ""
}


// ---------------------------------
// Enums
// ---------------------------------

// Defines user roles within the system
enum UserRole {
  CUSTOMER
  CASHIER
  ADMIN
}

// A general status enum for various models
enum GeneralStatus {
  ACTIVE
  INACTIVE
  PENDING 
  SUSPENDED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Defines types of accounts for treasury and customer funds
enum AccountType {
  SAVINGS       // Standard customer savings account
  SYSTEM_FLOAT  // Master account for holding/disbursing funds
  SYSTEM_FEES   // Account for collecting service/penalty fees
}

// Defines the nature of a transaction for a double-entry ledger
enum TransactionType {
  DEPOSIT           // Money coming into the system (e.g., from external source)
  WITHDRAWAL        // Money leaving the system (e.g., payout to customer)
  LOAN_DISBURSEMENT // Transfer from SYSTEM_FLOAT to CUSTOMER_SAVINGS
  LOAN_REPAYMENT    // Transfer from CUSTOMER_SAVINGS to SYSTEM_FLOAT
  PENALTY_PAYMENT   // Transfer from CUSTOMER_SAVINGS to SYSTEM_FEES
  INTERNAL_TRANSFER // e.g., Fee collection
}

// Status of a single transaction
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

// Overall status of a loan application and lifecycle
enum LoanStatus {
  PENDING    // Awaiting approval
  APPROVED   // Approved, awaiting disbursement
  ACTIVE     // Disbursed and awaiting repayment
  PAID_OFF   // Fully repaid
  REJECTED   // Application was rejected
  DEFAULTED  // Failed to repay, loan is in default
}

// Status of a single loan installment
enum InstallmentStatus {
  PENDING  // Awaiting payment
  PAID     // Paid in full
  OVERDUE  // Missed payment deadline
}

// Categories for events that modify a user's credit score
enum CreditFactor {
  INITIAL_SCORE          // Score assigned at onboarding
  ON_TIME_REPAYMENT      // Positive event
  LATE_REPAYMENT         // Negative event (status was OVERDUE)
  LOAN_DEFAULT           // Major negative event
  SAVINGS_ACTIVITY       // Small positive event for consistent deposits
  SUCCESSFUL_LOAN_CYCLE  // Positive event for completing a loan
}

// Categories for in-app/email notifications
enum NotificationType {
  LOAN_STATUS_UPDATE   // Your loan has been approved
  NEW_TRANSACTION      // You have received a deposit
  PAYMENT_REMINDER     // Your loan payment is due in 3 days
  PAYMENT_OVERDUE      // Your loan payment is overdue
  SECURITY_ALERT       // New device login
  GENERAL_MESSAGE
}


// ---------------------------------
// Models
// ---------------------------------

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  middleName String?
  lastName  String
  email     String   @unique
  password  String   @db.Text
  role      UserRole @default(CUSTOMER)
  gender    Gender?
  status    GeneralStatus @default(PENDING)
  // A cached, denormalized field for the user's current score.
  // This is updated by the application logic whenever a new CreditScoreLog is created.
  creditScore Int @default(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relations ---
  accounts         Account[]         // A customer has many savings accounts
  sessions        UserSession[]        // For device/session tracking
  loans           Loan[]           @relation("UserLoans") // Loans requested by user
  approvedLoans   Loan[]           @relation("AdminApprovals") // Loans approved by admin
  creditScoreLogs CreditScoreLog[] // Full history of score changes
  notifications   Notification[]   // In-app notifications
}

model UserSession {
  id           Int    @id @default(autoincrement())
  userId       Int
  refreshToken String    @unique @db.Text
  deviceInfo   String?   // User-Agent
  ipAddress    String?
  status       GeneralStatus @default(ACTIVE) // Can be set to PENDING for device approval
  expiresAt    DateTime
  createdAt    DateTime  @default(now())

  // --- Relations ---
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id            Int         @id @default(autoincrement())
  accountNumber String      @unique // A unique, human-readable account number (generated by application)
  userId        Int?        @unique // A SYSTEM account (e.g., float) is not tied to a regular user.
  balance       Float       @default(0.00)
  accountType   AccountType @default(SAVINGS)
  status        GeneralStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // --- Relations ---
  user                 User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  transactionsAsSource Transaction[] @relation("SourceAccount")
  transactionsAsDest   Transaction[] @relation("DestinationAccount")
}

model Transaction {
  id                   Int               @id @default(autoincrement())
  reference            String            @unique @default(cuid()) // Unique reference for auditing and idempotency
  sourceAccountId      Int
  destinationAccountId Int
  type                 TransactionType
  amount               Decimal           @db.Decimal(15, 2)
  status               TransactionStatus @default(PENDING)
  description          String?
  createdAt            DateTime          @default(now())

  // --- Relations ---
  sourceAccount      Account           @relation("SourceAccount", fields: [sourceAccountId], references: [id])
  destinationAccount Account           @relation("DestinationAccount", fields: [destinationAccountId], references: [id])
  loan               Loan?             @relation(fields: [loanId], references: [id])
  loanId             Int?              @unique // This transaction might be a payment for a loan (one-to-one)
}

model Loan {
  id                Int        @id @default(autoincrement())
  userId            Int        // The user who requested the loan
  requestedAmount   Decimal    @db.Decimal(15, 2)
  disbursedAmount   Decimal    @default(0.00) @db.Decimal(15, 2) // Amount after fees
  totalPayable      Decimal    @db.Decimal(15, 2) // Principal + Total Interest
  interestRate      Decimal    @db.Decimal(5, 2) // Annual interest rate
  termInMonths      Int
  status            LoanStatus @default(PENDING)
  approvedById      Int?       // The admin who approved the loan
  disbursementDate  DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // --- Relations ---
  user         User              @relation("UserLoans", fields: [userId], references: [id])
  approvedBy   User?             @relation("AdminApprovals", fields: [approvedById], references: [id])
  transaction   Transaction?
  CreditScoreLog CreditScoreLog[] 
}

// Tracks every event that affects a user's credit score
model CreditScoreLog {
  id              Int      @id @default(autoincrement())
  userId          Int
  factor          CreditFactor // The reason for the score change
  pointsChanged   Int
  description     String?  // e.g., "Paid loan #3"
  loanId          Int?     @unique
  createdAt       DateTime @default(now())

  // --- Relations ---
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  loan           Loan?            @relation(fields: [loanId], references: [id])
}

// In-app notifications for users
model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  message   String           @db.Text
  isRead    Boolean          @default(false)
  type      NotificationType @default(GENERAL_MESSAGE)
  createdAt DateTime         @default(now())

  // --- Relations ---
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
